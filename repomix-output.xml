This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
tp1/
  ex01/
    main.py
  ex02/
    main.py
  ex03/
    main.py
  ex04/
    main.py
  ex05/
    main.py
  ex06/
    main.py
  ex07/
    main.py
  ex08/
    main.py
  ex09/
    main.py
  ex10/
    main.py
  ex11/
    main.py
  ex12/
    main.py
  run_all.py
create_structure.py
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="tp1/ex01/main.py">
def main():
    nome_estagiario = "Luiz Paulo"
    idade_estagiario = 62
    codigo_departamento = "Pedagógico"
    print(f"Nome: {nome_estagiario}")
    print(f"Idade: {idade_estagiario}")
    print(f"Código do Departamento: {codigo_departamento}")

if __name__ == "__main__":
    main()
</file>

<file path="tp1/ex02/main.py">
def main():
    nome_cliente = "Marcos"
    idade_cliente = 19
    score_credito = 772.4
    cliente_ativo = True
    print(f"{nome_cliente} & {type(nome_cliente)}")
    print(f"{idade_cliente} & {type(idade_cliente)}")
    print(f"{score_credito} & {type(score_credito)}")
    print(f"{cliente_ativo} & {type(cliente_ativo)}")

if __name__ == "__main__":
    main()
</file>

<file path="tp1/ex03/main.py">
def main():
    ano_2_digitos = 25
    km_por_dia = 80
    gasto_diario = 300 + ano_2_digitos
    
    total_semana = km_por_dia * 7 
    diferenca_gasto = gasto_diario - 100
    dias_cobertos = 500 / gasto_diario
    porcentagem_diaria = gasto_diario % 100
    media_diaria = gasto_diario / km_por_dia
    
    print(total_semana)
    print(diferenca_gasto)
    print(dias_cobertos)
    print(porcentagem_diaria)
    print(media_diaria)

if __name__ == "__main__":
    main()
</file>

<file path="tp1/ex04/main.py">
def main():
    ano_2_digitos = 15
    tempo_minutos = 150 + ano_2_digitos
    tempo_horas = 2.25
    
    horas = tempo_minutos / 60
    minutos = tempo_horas * 60
    
    print(f"{horas} horas & {minutos} minutos")

if __name__ == "__main__":
    main()
</file>

<file path="tp1/ex05/main.py">
def main():
    msg_aspas_simples = 'Marcos Ryan'
    msg_aspas_duplas = "Marcos Ryan"
    relatorio_triple = """
    Fazer TP de Python
    Teste de perfomance da linguagem Python
    Status: Pendente
    """
    
    print(msg_aspas_simples)
    print(msg_aspas_duplas)
    print(relatorio_triple)

if __name__ == "__main__":
    main()
</file>

<file path="tp1/ex06/main.py">
def main():
    nome = "Marcos"
    sobrenome = "Santos"
    codigo_turma = "N1LCN2"
    
    print(f"Bem-vindo(a), {nome} {sobrenome}! Sua turma é {codigo_turma}.")

if __name__ == "__main__":
    main()
</file>

<file path="tp1/ex07/main.py">
def main():
    alerta = "ATENÇÃO! "
    faixa_alerta = alerta * 5
    
    print(faixa_alerta)
    

if __name__ == "__main__":
    main()
</file>

<file path="tp1/ex08/main.py">
def main():
    nome_completo = 'Marcos Ryan'
    
    print(nome_completo.upper())
    print(nome_completo.lower())
    print(nome_completo.title())
    print(nome_completo.capitalize())
    print(nome_completo.swapcase())
    

if __name__ == "__main__":
    main()
</file>

<file path="tp1/ex09/main.py">
def main():
    habilidades = 'Domínio em Python, SQL e Excel'
    busca = 'Python'
    
    print(busca in habilidades)

if __name__ == "__main__":
    main()
</file>

<file path="tp1/ex10/main.py">
def main():
    opiniao = 'Serviço excelente aluno Marcos Ryan Silva Santos, voltarei a comprar!'
    print(f'Caracteres: {len(opiniao)}')
    print(f'Caracter A: {opiniao.count('a')}') # count, diferente do dito no enunciado, conta as ocorrencias de determinada string
    print(f'Palavras na Frase: {len(opiniao.split())}') # seria mais correto para contas as palavras
    
if __name__ == "__main__":
    main()
</file>

<file path="tp1/ex11/main.py">
def main():
    ano_txt = '2006'
    ano_int = int(ano_txt) + 5
    print(f'{ano_txt} & {type(ano_txt)}')
    print(f'{ano_int} & {type(ano_int)}')
    

if __name__ == "__main__":
    main()
</file>

<file path="tp1/ex12/main.py">
def main():
    desconto_txt = '60'
    desconto_num = int(desconto_txt) / 3.14
    valor_fixo = 599.99
    valor_final = valor_fixo - desconto_num
    
    print(f"Valor final: {valor_final}")

if __name__ == "__main__":
    main()
</file>

<file path="tp1/run_all.py">
import importlib
import time

def run_exercise(tp, ex_number):
    try:
        # Importa o módulo main do exercício
        module = importlib.import_module(f"tp{tp}.ex{ex_number:02d}.main")
        print(f"\nExecutando TP{tp} - Exercício {ex_number:02d}")
        start_time = time.perf_counter()
        module.main()  # Assume que cada main.py tem uma função main()
        end_time = time.perf_counter()
        print(f"Tempo de execução: {end_time - start_time:.6f} segundos")
    except ImportError as e:
        print(f"Erro ao executar TP{tp} - Exercício {ex_number:02d}: {e}")

if __name__ == "__main__":
    for ex in range(1, 13):  # Para 12 exercícios
        run_exercise(1, ex)
</file>

<file path="create_structure.py">
import os

# Define a estrutura do projeto - rápidez na formatação das pastas
base_dir = "TP"
tps = ["tp1", "tp2", "tp3"]
exercises = [f"ex{i:02d}" for i in range(1, 13)]
common_dir = "common"

os.makedirs(base_dir, exist_ok=True)

for tp in tps:
    tp_path = os.path.join(base_dir, tp)
    os.makedirs(tp_path, exist_ok=True)
    for ex in exercises:
        ex_path = os.path.join(tp_path, ex)
        os.makedirs(ex_path, exist_ok=True)

os.makedirs(os.path.join(base_dir, common_dir), exist_ok=True)

print("Estrutura de pastas criada com sucesso!")
</file>

</files>
